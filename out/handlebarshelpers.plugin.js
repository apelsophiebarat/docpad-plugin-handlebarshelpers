// Generated by CoffeeScript 1.6.3
(function() {
  var extendr, pathUtil,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  extendr = require('extendr');

  pathUtil = require('path');

  module.exports = function(BasePlugin) {
    var HandlebarsPlugin, HandlebarshelpersPlugin;
    HandlebarsPlugin = require('docpad-plugin-handlebars')(BasePlugin);
    return HandlebarshelpersPlugin = (function(_super) {
      __extends(HandlebarshelpersPlugin, _super);

      HandlebarshelpersPlugin.prototype.name = 'handlebarshelpers';

      function HandlebarshelpersPlugin() {
        HandlebarshelpersPlugin.__super__.constructor.apply(this, arguments);
        this.registerHelpers();
      }

      HandlebarshelpersPlugin.prototype.trace = function(msg) {
        if (this.config.debug) {
          return this.docpad.log('[' + this.name + '] ' + msg);
        }
      };

      HandlebarshelpersPlugin.prototype.registerHelpers = function() {
        var config, docpad, docpadConfig, helper, helperModule, helperPath, helperRelativePath, name, _i, _len, _ref, _results;
        config = this.config;
        docpad = this.docpad;
        docpadConfig = docpad.getConfig();
        _ref = config.helpersExtension || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          helperRelativePath = _ref[_i];
          helperPath = pathUtil.join(docpadConfig.rootPath, helperRelativePath);
          this.trace('Load handlebars helpers module ' + helperRelativePath);
          helperModule = require(helperPath);
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (name in helperModule) {
              helper = helperModule[name];
              this.trace('add helper ' + name);
              _results1.push(this.handlebars.registerHelper(name, helper));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      return HandlebarshelpersPlugin;

    })(HandlebarsPlugin);
  };

}).call(this);
